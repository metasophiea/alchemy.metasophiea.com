2:I[2972,["2972","static/chunks/2972-9030f67b9ad29f25.js","7734","static/chunks/app/guide/developer/tutorials/article/multi-channel-distortion/page-d60dce4a9149ffcd.js"],""]
3:I[459,["2972","static/chunks/2972-9030f67b9ad29f25.js","7734","static/chunks/app/guide/developer/tutorials/article/multi-channel-distortion/page-d60dce4a9149ffcd.js"],"default"]
4:I[4707,[],""]
5:I[6423,[],""]
6:I[959,["2972","static/chunks/2972-9030f67b9ad29f25.js","3185","static/chunks/app/layout-514cdb3954874de5.js"],"default"]
0:["UcmVjZIezE508PYqIDTjH",[[["",{"children":["guide",{"children":["developer",{"children":["tutorials",{"children":["article",{"children":["multi-channel-distortion",{"children":["__PAGE__",{}]}]}]}]}]}]},"$undefined","$undefined",true],["",{"children":["guide",{"children":["developer",{"children":["tutorials",{"children":["article",{"children":["multi-channel-distortion",{"children":["__PAGE__",{},[["$L1",["$","main",null,{"children":["$","div",null,{"className":"style_main__c51pI","children":[["$","div",null,{"className":"style_main__F_177","children":[["$","$L2","0",{"href":"/","className":"style_link__eozNW","aria-disabled":false,"tabIndex":"$undefined","children":"home"}],["$","p","divider1",{"className":"style_divider__YWHjs","children":"/"}],["$","$L2","1",{"href":"/guide","className":"style_link__eozNW","aria-disabled":false,"tabIndex":"$undefined","children":"guide"}],["$","p","divider2",{"className":"style_divider__YWHjs","children":"/"}],["$","$L2","2",{"href":"/guide/developer","className":"style_link__eozNW","aria-disabled":false,"tabIndex":"$undefined","children":"developer"}],["$","p","divider3",{"className":"style_divider__YWHjs","children":"/"}],["$","$L2","3",{"href":"/guide/developer/tutorials","className":"style_link__eozNW","aria-disabled":false,"tabIndex":"$undefined","children":"tutorials"}],["$","p","divider4",{"className":"style_divider__YWHjs","children":"/"}],["$","$L2","4",{"href":"/guide/developer/tutorials/article/multi-channel-distortion","className":"style_link__eozNW","aria-disabled":true,"tabIndex":-1,"children":"Multi Channel Distortion"}]]}],["$","div",null,{"className":"style_content__rQ3D1","children":[["$","h1",null,{"className":"style_title__QJpJn","children":"Multi Channel Distortion"}],["$","h2",null,{"className":"style_subTitle___R0E7","children":"A example of working with the Audio engine"}],["$","img",null,{"src":"/four_colour_stripes_banner.png","className":"style_headerImage__jM6kU"}],["$","div",null,{"className":"style_childrenWrapper__Nt54u","children":[["$","h2",null,{"children":"Introduction"}],["$","p",null,{"children":"In this tutorial we will be building a unit which uses the audio engine. Its going to be a three-band distortion filter. The idea being that we want to be able to apply distortion to the High, Mid and Low frequency bands."}],["$","p",null,{"children":"The audio circuit will look like this"}],["$","img",null,{"className":"style_image80__ax_CV","src":"/guide/developer/tutorials/multi-channel-distortion/flow.png"}],["$","p",null,{"children":"Each gain and WaveShaper will be controllable. We will hardcode the vales for the HighMidLowFilters."}],["$","div",null,{"className":"style_main__L8yyS","children":[["$","h3",null,{"className":"style_title__oTWxy","children":"Note"}],["$","div",null,{"className":"style_children__6YSiK","children":["We will be using the Deno runtime to run a typescript program. You can learn about how to set this up in the ",["$","$L2",null,{"className":"$undefined","href":"/guide/developer/tutorials/article/how-to-make-a-unit/1","children":"How To Make A Unit"}]," tutorial"]}]]}],["$","h2",null,{"children":"The Group Description"}],["$","$L3",null,{"lines":["{","\t\"printName\": \"Custom Audio\",","\t\"inDevelopment\": true,","\t\"subListWidth\": 160.0","}"],"includeLineNumbers":true}],["$","p",null,{"children":"Pretty straightforward, though we set the \"inDevelopment\" entry to true while we're still developing the unit. We also set the \"subListWidth\" value to 160, in order to accommodate the title of the unit."}],["$","h2",null,{"children":"The Unit Description"}],["$","p",null,{"children":"Next lets move onto the unit description itself. I first designed the layout of this unit in my head, then began creating the file, recreating the unit and iterating the design as I went along before arriving at what you see below. This is a rather slow process involving many restarts of Alchemy. Alchemy's roadmap includes a better way to design units, but for now we're stuck with this process."}],["$","p",null,{"children":"I recommend first designing your unit in a vector-based design program, then copying the element details over. Though for this unit I've done all the work for you."}],["$","$L3",null,{"lines":["{","\t\"inDevelopment\": true,","\t\"modelName\": \"multi_channel_distortion\",","\t\"printName\": \"Multi Channel Distortion\",","\t\"space\": [","\t\t{\"x\": 0.0, \"y\": 0.0},","\t\t{\"x\": 0.0, \"y\": 150.0},","\t\t{\"x\": 155.0, \"y\": 150.0},","\t\t{\"x\": 155.0, \"y\": 0.0}","\t],","\t\"collisionActive\": true,","\t\"executable\": {","\t\t\"mac\": \"../deno\",","\t\t\"win\": \"../deno.exe\",","\t\t\"args\": [\"run\", \"--allow-read\", \"main.ts\"]","\t},","\t\"base\": [","\t\t{","\t\t\t\"name\": \"backing\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"rectangle\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"width\": 155.0,","\t\t\t\t\t\"height\": 150.0,","\t\t\t\t\t\"colour\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"frame\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"rectangle\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 5.0,","\t\t\t\t\t\"y\": 5.0,","\t\t\t\t\t\"width\": 145.0,","\t\t\t\t\t\"height\": 125.0,","\t\t\t\t\t\"colour\": {\"r\": 0.35, \"g\": 0.35, \"b\": 0.35}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"join_in\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"path\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 10.0,","\t\t\t\t\t\"y\": 25.0,","\t\t\t\t\t\"points\": [{\"x\":0.0, \"y\":0.0}, {\"x\":0.0, \"y\":70.0}],","\t\t\t\t\t\"thickness\": 2.5,","\t\t\t\t\t\"colour\": {\"r\": 0.45, \"g\": 0.45, \"b\": 0.45}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"join_out\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"path\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 145.0,","\t\t\t\t\t\"y\": 25.0,","\t\t\t\t\t\"points\": [{\"x\":0.0, \"y\":0.0}, {\"x\":0.0, \"y\":70.0}],","\t\t\t\t\t\"thickness\": 2.5,","\t\t\t\t\t\"colour\": {\"r\": 0.45, \"g\": 0.45, \"b\": 0.45}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"channel_1\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"path\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 10.0,","\t\t\t\t\t\"y\": 25.0,","\t\t\t\t\t\"points\": [{\"x\":0.0, \"y\":0.0}, {\"x\":135.0, \"y\":0.0}],","\t\t\t\t\t\"thickness\": 2.5,","\t\t\t\t\t\"colour\": {\"r\": 0.45, \"g\": 0.45, \"b\": 0.45}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"channel_2\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"path\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 0.0,","\t\t\t\t\t\"y\": 60.0,","\t\t\t\t\t\"points\": [{\"x\":0.0, \"y\":0.0}, {\"x\":155.0, \"y\":0.0}],","\t\t\t\t\t\"thickness\": 2.5,","\t\t\t\t\t\"colour\": {\"r\": 0.45, \"g\": 0.45, \"b\": 0.45}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"channel_3\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"path\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 10.0,","\t\t\t\t\t\"y\": 95.0,","\t\t\t\t\t\"points\": [{\"x\":0.0, \"y\":0.0}, {\"x\":135.0, \"y\":0.0}],","\t\t\t\t\t\"thickness\": 2.5,","\t\t\t\t\t\"colour\": {\"r\": 0.45, \"g\": 0.45, \"b\": 0.45}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"group\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"rectangle\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 40.0,","\t\t\t\t\t\"y\": 7.5,","\t\t\t\t\t\"width\": 75.0,","\t\t\t\t\t\"height\": 120.0,","\t\t\t\t\t\"colour\": {\"r\": 1, \"g\": 1, \"b\": 1, \"a\": 0.25}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"logo\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"characterString\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 5.0,","\t\t\t\t\t\"y\": 145.0,","\t\t\t\t\t\"scale\": 0.6,","\t\t\t\t\t\"characterString\": \"Custom Audio\",","\t\t\t\t\t\"interCharacterSpacing\": 1.0,","\t\t\t\t\t\"colour\": {\"r\": 1, \"g\": 1, \"b\": 1}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"model\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"characterString\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 150.0,","\t\t\t\t\t\"y\": 145.0,","\t\t\t\t\t\"scale\": 0.4,","\t\t\t\t\t\"characterString\": \"Multi Channel Distortion\",","\t\t\t\t\t\"interCharacterSpacing\": 1.0,","\t\t\t\t\t\"printingModeHorizontal\": \"right\",","\t\t\t\t\t\"colour\": {\"r\": 1, \"g\": 1, \"b\": 1}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"out_gain_text\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"characterString\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 25.0,","\t\t\t\t\t\"y\": 117.5,","\t\t\t\t\t\"scale\": 0.4,","\t\t\t\t\t\"characterString\": \"out gain\",","\t\t\t\t\t\"printingModeHorizontal\": \"middle\",","\t\t\t\t\t\"printingModeVertical\": \"calculatedTop\",","\t\t\t\t\t\"interCharacterSpacing\": 1.0,","\t\t\t\t\t\"colour\": {\"r\": 0, \"g\": 0, \"b\": 0}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"distortion\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"characterString\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 60.0,","\t\t\t\t\t\"y\": 117.5,","\t\t\t\t\t\"scale\": 0.4,","\t\t\t\t\t\"characterString\": \"distortion\",","\t\t\t\t\t\"printingModeHorizontal\": \"middle\",","\t\t\t\t\t\"printingModeVertical\": \"calculatedTop\",","\t\t\t\t\t\"interCharacterSpacing\": 1.0,","\t\t\t\t\t\"colour\": {\"r\": 0, \"g\": 0, \"b\": 0}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"resolution\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"characterString\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 95.0,","\t\t\t\t\t\"y\": 117.5,","\t\t\t\t\t\"scale\": 0.4,","\t\t\t\t\t\"characterString\": \"resolution\",","\t\t\t\t\t\"printingModeHorizontal\": \"middle\",","\t\t\t\t\t\"printingModeVertical\": \"calculatedTop\",","\t\t\t\t\t\"interCharacterSpacing\": 1.0,","\t\t\t\t\t\"colour\": {\"r\": 0, \"g\": 0, \"b\": 0}","\t\t\t\t}","\t\t\t}","\t\t},","\t\t{","\t\t\t\"name\": \"in_gain_text\",","\t\t\t\"attribute\": {","\t\t\t\t\"type\": \"characterString\",","\t\t\t\t\"content\": {","\t\t\t\t\t\"x\": 130.0,","\t\t\t\t\t\"y\": 117.5,","\t\t\t\t\t\"scale\": 0.4,","\t\t\t\t\t\"characterString\": \"in gain\",","\t\t\t\t\t\"printingModeHorizontal\": \"middle\",","\t\t\t\t\t\"printingModeVertical\": \"calculatedTop\",","\t\t\t\t\t\"interCharacterSpacing\": 1.0,","\t\t\t\t\t\"colour\": {\"r\": 0, \"g\": 0, \"b\": 0}","\t\t\t\t}","\t\t\t}","\t\t}","\t],","\t\"parts\": {","\t\t\"back\": [","\t\t\t{","\t\t\t\t\"name\": \"audio_in\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"audioPort\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 0.0,","\t\t\t\t\t\t\"y\": 60.0,","\t\t\t\t\t\t\"height\": 15.0,","\t\t\t\t\t\t\"width\": 5.0,","\t\t\t\t\t\t\"angle\": 3.1415927,","\t\t\t\t\t\t\"anchor\": {\"x\":0, \"y\":0.5},","\t\t\t\t\t\t\"mode\": \"producer\"","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"audio_out\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"audioPort\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 155.0,","\t\t\t\t\t\t\"y\": 60.0,","\t\t\t\t\t\t\"height\": 15.0,","\t\t\t\t\t\t\"width\": 5.0,","\t\t\t\t\t\t\"anchor\": {\"x\":0, \"y\":0.5},","\t\t\t\t\t\t\"mode\": \"consumer\"","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t],","\t\t\"front\": [","\t\t\t{","\t\t\t\t\"name\": \"gain_out_1\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 25.0,","\t\t\t\t\t\t\"y\": 25.0,","\t\t\t\t\t\t\"radius\": 10.0,","\t\t\t\t\t\t\"resetValue\": 0.5,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"gain_out_2\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 25.0,","\t\t\t\t\t\t\"y\": 60.0,","\t\t\t\t\t\t\"radius\": 10.0,","\t\t\t\t\t\t\"resetValue\": 0.5,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"gain_out_3\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 25.0,","\t\t\t\t\t\t\"y\": 95.0,","\t\t\t\t\t\t\"radius\": 10.0,","\t\t\t\t\t\t\"resetValue\": 0.5,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"distortion_1\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 60.0,","\t\t\t\t\t\t\"y\": 25.0,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"distortion_2\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 60.0,","\t\t\t\t\t\t\"y\": 60.0,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"distortion_3\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 60.0,","\t\t\t\t\t\t\"y\": 95.0,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"resolution_1\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 95.0,","\t\t\t\t\t\t\"y\": 25.0,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"resolution_2\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 95.0,","\t\t\t\t\t\t\"y\": 60.0,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"resolution_3\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 95.0,","\t\t\t\t\t\t\"y\": 95.0,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"gain_in_1\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 130.0,","\t\t\t\t\t\t\"y\": 25.0,","\t\t\t\t\t\t\"radius\": 10.0,","\t\t\t\t\t\t\"resetValue\": 0.5,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"gain_in_2\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 130.0,","\t\t\t\t\t\t\"y\": 60.0,","\t\t\t\t\t\t\"radius\": 10.0,","\t\t\t\t\t\t\"resetValue\": 0.5,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\t{","\t\t\t\t\"name\": \"gain_in_3\",","\t\t\t\t\"attribute\": {","\t\t\t\t\t\"type\": \"dialContinuousDesign1\",","\t\t\t\t\t\"content\": {","\t\t\t\t\t\t\"x\": 130.0,","\t\t\t\t\t\t\"y\": 95.0,","\t\t\t\t\t\t\"radius\": 10.0,","\t\t\t\t\t\t\"resetValue\": 0.5,","\t\t\t\t\t\t\"styleSlot\": {\"r\": 0.25, \"g\": 0.02, \"b\": 0.02},","\t\t\t\t\t\t\"styleHandle\": {\"r\": 0.65, \"g\": 0.65, \"b\": 0.65},","\t\t\t\t\t\t\"styleNeedle\": {\"r\": 0.95, \"g\": 0.95, \"b\": 0.95},","\t\t\t\t\t\t\"styleInteractionDisk\": {\"r\": 0.25, \"g\": 0.25, \"b\": 0.25, \"a\": 0.25}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t]","\t}","}"],"includeLineNumbers":true}],["$","p",null,{"children":"This description should produce a unit that looks like this"}],["$","img",null,{"className":"style_image80__ax_CV","src":"/guide/developer/tutorials/multi-channel-distortion/unit.png"}],["$","p",null,{"children":"There are no special requirements for enabling the audio engine. Audio ports are defined like any other port, except that they require a \"mode\" entry, set to either \"consumer\" or \"producer\". As the names suggest, \"consumer\" ports received audio streams while \"producer\" ports send it."}],["$","p",null,{"children":"We now should have a file structure that looks like this."}],["$","$L3",null,{"lines":["custom_audio","├─ deno","├─ multi_channel_distortion","│  └─ index.unit","└─ typescript-deno-x.x.x-y.y.y"]}],["$","h2",null,{"children":"The Inner Workings"}],["$","p",null,{"children":"Unlike the graphical design, audio nodes are created at run time using the API. One consequence of this is that we must send a request for an audio node to be created then await a response containing the nodeId of this newly created node. We then use this nodeId to set up connections between nodes, or to modify the settings of a particular node."}],["$","p",null,{"children":"For the state, we will be storing the value of the dials instead of the values those dials represent. This will make reading and writing those values easier when they come from the import listener, or from the undo/redo listeners. We will then be setting up a series of conversion functions which will be used to convert dial values to the actual functioning values (eg. to distortion amount, to gain amount, etc.)"}],["$","p",null,{"children":"This is set to be a rather large Typescript program, so lets try to split a few things out to help. First, lets set up a map of part names to their index numbers. We'll put this in a \"constants.ts\" file."}],["$","$L3",null,{"lines":["export const part = {","\tgainOut1: 0,","\tgainOut2: 1,","\tgainOut3: 2,","\tdistortion1: 3,","\tdistortion2: 4,","\tdistortion3: 5,","\tresolution1: 6,","\tresolution2: 7,","\tresolution3: 8,","\tgainIn1: 9,","\tgainIn2: 10,","\tgainIn3: 11","};"],"includeLineNumbers":true}],["$","p",null,{"children":"Next we'll create a \"types.ts\" file to hold the interface definitions for the audio circuit nodes and the unit state itself. Note how the AudioCircuit's values are all optional. These will be filled in at runtime when the nodeIds of the requested nodes come in."}],["$","$L3",null,{"lines":["import type { NodeId } from \"../typescript-deno-0.3.3-0.1.0/types/platform/audio/alpa/library/id/nodeId/index.ts\";","","export interface State {","\tgainIn1: number,","\tgainIn2: number,","\tgainIn3: number,","\tdistortion1: number,","\tdistortion2: number,","\tdistortion3: number,","\tresolution1: number,","\tresolution2: number,","\tresolution3: number,","\tgainOut1: number,","\tgainOut2: number,","\tgainOut3: number","}","","export interface AudioCircuit {","\tstreamDuplicator1: NodeId | undefined,","\tstreamDuplicator2: NodeId | undefined,","\thighMidLowFilter1: NodeId | undefined,","\thighMidLowFilter2: NodeId | undefined,","\thighMidLowFilter3: NodeId | undefined,","\tgainIn1: NodeId | undefined,","\tgainIn2: NodeId | undefined,","\tgainIn3: NodeId | undefined,","\twaveShaper1: NodeId | undefined,","\twaveShaper2: NodeId | undefined,","\twaveShaper3: NodeId | undefined,","\tgainOut1: NodeId | undefined,","\tgainOut2: NodeId | undefined,","\tgainOut3: NodeId | undefined,","\tstreamAdder3: NodeId | undefined","}"],"includeLineNumbers":true}],["$","p",null,{"children":"Finally, lets round things out with a \"utils.ts\" file. This will export two thing; a function to update the Exportable Data store, and object of functions which will be used to convert dial values to the values they represent."}],["$","$L3",null,{"lines":["import apiConsole from \"../typescript-deno-0.3.3-0.1.0/index.ts\";","","import { State } from './types.ts';","","export function updateExportableData(state:State) {","\tapiConsole.unit.updateExportableData(","\t\tJSON.stringify(state)","\t);","}","","function clamp(num:number, min:number, max:number): number {","\treturn num <= min ? min : num >= max ? max : num;","}","","function normalizeStretchArray(array:number[]): number[] {","\t//check for an empty array","\t\tif(array.length === 0) { return array; }","","\t//discover the largest number","\t\tlet biggestValue = Math.max(","\t\t\t...array.map((a) => Math.abs(a))","\t\t);","","\t//divide everything by this largest number, making everything a ratio of this value ","\t\tconst outputArray = array.map((a) => a / biggestValue);","","\t//stretch the other side of the array to meet 0 or 1","\t\tif(outputArray[0] === 0 && array[array.length-1] === 1){ return outputArray; }","\t\tlet pertinentValue = outputArray[0] !== 0 ? outputArray[0] : outputArray[array.length-1];","\t\tfor(let a = 0; a < outputArray.length; a++) {","\t\t\toutputArray[a] = (outputArray[a] - pertinentValue) / (1.0 - pertinentValue);","\t\t}","","\treturn outputArray;","}","","function sCurve(resolution:number, distortion:number): number[] {","\tresolution = Math.round(resolution);","","\tif(distortion === 0) {","\t\treturn new Array(resolution).fill(0).map((_, index) => (index/resolution) * 2 - 1);","\t}","","\tlet curve = new Array(resolution)","\t\t.fill(0)","\t\t.map((_, index) => {","\t\t\tconst step = index/resolution;","\t\t\treturn 1/(","\t\t\t\t1 + Math.exp(-distortion*(step-0.5))","\t\t\t);","\t\t}","\t);","","\tcurve = normalizeStretchArray(curve);","","\tfor(let a = 0; a < curve.length; a++) {","\t\tcurve[a] = curve[a] * 2 - 1;","\t}","","\treturn curve;","}","","export const interfaceTo = {","\tgain: (gainDial:number):number => gainDial * 2,","\tdistortion: (distortionDial:number):number => distortionDial * 100.0,","\tresolution: (resolutionDial:number):number => clamp((resolutionDial * 1000.0), 2, 1000),","\twaveShaperCurve: (distortionDial:number, resolutionDial:number) => sCurve(interfaceTo.resolution(distortionDial), interfaceTo.distortion(resolutionDial)),","};"],"includeLineNumbers":true}],["$","p",null,{"children":"We now should have a file structure that looks like this."}],["$","$L3",null,{"lines":["custom_audio","├─ deno","├─ multi_channel_distortion","│  ├ constants.ts","│  ├ index.unit","│  ├ types.ts","│  └ utils.ts","└─ typescript-deno-x.x.x-y.y.y"]}],["$","p",null,{"children":"Now, on to the main program."}],["$","h2",null,{"children":"The Main Program"}],["$","p",null,{"children":"The main.ts file has 5 sections."}],["$","ol",null,{"children":[["$","li",null,{"children":"Defining the state"}],["$","li",null,{"children":"Setup"}],["$","li",null,{"children":"Mouse event handlers"}],["$","li",null,{"children":"The import hander"}],["$","li",null,{"children":"Undo / Redo handlers"}]]}],["$","p",null,{"children":"Before all that though, lets import everything we need."}],["$","$L3",null,{"lines":["import apiConsole from \"../typescript-deno-0.3.3-0.1.0/index.ts\";","import { PartEvent } from '../typescript-deno-0.3.3-0.1.0/types/platform/interface/part/event/partEvent.ts';","import { Modification } from \"../typescript-deno-0.3.3-0.1.0/types/platform/unit/unit/modification/index.ts\";","","import { part } from './constants.ts';","import { AudioCircuit, State } from './types.ts';","import { interfaceTo, updateExportableData } from './utils.ts';"]}],["$","div",null,{"className":"style_group__F7vT_","children":[["$","h3",null,{"children":"Defining the state"}],["$","p",null,{"children":"This short section crates the \"audioCircuit\" and \"state\" variables using the types defined in the \"types.ts\" file. All the values of \"audioCircuit\" are set to undefined for now as we will populate them in the 'Setup' section. The \"state\" is set to the initial 'dial-values' of the design. Here that means that all the 'gain' and 'resolution' dials are set to 0.5"}],["$","$L3",null,{"includeLineNumbers":true,"lines":["const audioCircuit:AudioCircuit = {","\tstreamDuplicator1: undefined,","\tstreamDuplicator2: undefined,","\thighMidLowFilter1: undefined,","\thighMidLowFilter2: undefined,","\thighMidLowFilter3: undefined,","\tgainIn1: undefined,","\tgainIn2: undefined,","\tgainIn3: undefined,","\twaveShaper1: undefined,","\twaveShaper2: undefined,","\twaveShaper3: undefined,","\tgainOut1: undefined,","\tgainOut2: undefined,","\tgainOut3: undefined,","\tstreamAdder3: undefined","}","","let state:State = {","\tgainIn1: 0.5,","\tgainIn2: 0.5,","\tgainIn3: 0.5,","\tdistortion1: 0.0,","\tdistortion2: 0.0,","\tdistortion3: 0.0,","\tresolution1: 0.5,","\tresolution2: 0.5,","\tresolution3: 0.5,","\tgainOut1: 0.5,","\tgainOut2: 0.5,","\tgainOut3: 0.5","};"]}],["$","h3",null,{"children":"Setup"}],["$","p",null,{"children":"Here we create the audio nodes, connect them together, give them their initial settings and initialise the dials."}],["$","p",null,{"children":"The ApiConsole's \"alpa.createNode\" command comes with a callback function which will be run when the nodeId for the requested audio node is returned from Alchemy. So, we can use this to populate the appropriate entry in the \"audioCircuit\" constant. We also run a \"updateAudioConnections\" function. This function will only allow itself to be run when all the entries of the \"audioCircuit\" constant have been populated. The function will then set up all the audio routing and set the values of the audio nodes. You will notice in that second section where the values are applied, that we use the conversion functions defined in the \"utils.ts\" file."}],["$","p",null,{"children":"Under the \"updateAudioConnections\" function, we can see all the dials being initialised with the values from the \"state\" variable. "}],["$","$L3",null,{"lines":["//audio circuit","\tapiConsole.alpa.createNode({ \"type\": \"StreamDuplicator\" }, (node_id) => {audioCircuit.streamDuplicator1 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"StreamDuplicator\" }, (node_id) => {audioCircuit.streamDuplicator2 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"HighMidLowFilter\" }, (node_id) => {audioCircuit.highMidLowFilter1 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"HighMidLowFilter\" }, (node_id) => {audioCircuit.highMidLowFilter2 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"HighMidLowFilter\" }, (node_id) => {audioCircuit.highMidLowFilter3 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainIn1 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainIn2 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainIn3 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"WaveShaper\" }, (node_id) => {audioCircuit.waveShaper1 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"WaveShaper\" }, (node_id) => {audioCircuit.waveShaper2 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"WaveShaper\" }, (node_id) => {audioCircuit.waveShaper3 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainOut1 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainOut2 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainOut3 = node_id; updateAudioConnections();});","\tapiConsole.alpa.createNode({ \"type\": \"StreamAdder3\" }, (node_id) => {audioCircuit.streamAdder3 = node_id; updateAudioConnections();});","","\tfunction updateAudioConnections() {","\t\tif(","\t\t\taudioCircuit.streamDuplicator1 === undefined ||","\t\t\taudioCircuit.streamDuplicator2 === undefined ||","\t\t\taudioCircuit.highMidLowFilter1 === undefined ||","\t\t\taudioCircuit.highMidLowFilter2 === undefined ||","\t\t\taudioCircuit.highMidLowFilter3 === undefined ||","\t\t\taudioCircuit.gainIn1 === undefined ||","\t\t\taudioCircuit.gainIn2 === undefined ||","\t\t\taudioCircuit.gainIn3 === undefined ||","\t\t\taudioCircuit.waveShaper1 === undefined ||","\t\t\taudioCircuit.waveShaper2 === undefined ||","\t\t\taudioCircuit.waveShaper3 === undefined ||","\t\t\taudioCircuit.gainOut1 === undefined ||","\t\t\taudioCircuit.gainOut2 === undefined ||","\t\t\taudioCircuit.gainOut3 === undefined ||","\t\t\taudioCircuit.streamAdder3 === undefined","\t\t) { return; }","","\t\tconst audioPortNodeIDs = apiConsole.alpa.getAudioPortNodeIds();","\t\tif(audioPortNodeIDs === undefined) { return; }","","\t\t//routing","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioPortNodeIDs[0], 0, audioCircuit.streamDuplicator1, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamDuplicator1, 1, audioCircuit.streamDuplicator2, 0, () => {});","","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamDuplicator1, 0, audioCircuit.gainIn1, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamDuplicator2, 0, audioCircuit.gainIn2, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamDuplicator2, 1, audioCircuit.gainIn3, 0, () => {});","","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainIn1, 0, audioCircuit.waveShaper1, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainIn2, 0, audioCircuit.waveShaper2, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainIn3, 0, audioCircuit.waveShaper3, 0, () => {});","","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.waveShaper1, 0, audioCircuit.highMidLowFilter1, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.waveShaper2, 0, audioCircuit.highMidLowFilter2, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.waveShaper3, 0, audioCircuit.highMidLowFilter3, 0, () => {});","","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.highMidLowFilter1, 0, audioCircuit.gainOut1, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.highMidLowFilter2, 0, audioCircuit.gainOut2, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.highMidLowFilter3, 0, audioCircuit.gainOut3, 0, () => {});","","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainOut1, 0, audioCircuit.streamAdder3, 0, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainOut2, 0, audioCircuit.streamAdder3, 1, () => {});","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainOut3, 0, audioCircuit.streamAdder3, 2, () => {});","","\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamAdder3, 0, audioPortNodeIDs[1], 0, () => {});","","\t\t//set up","\t\t\tapiConsole.alpa.highMidLowFilter.setHighBandQ(audioCircuit.highMidLowFilter1, 1);","\t\t\tapiConsole.alpa.highMidLowFilter.setMidBandQ(audioCircuit.highMidLowFilter1, 1);","\t\t\tapiConsole.alpa.highMidLowFilter.setLowBandQ(audioCircuit.highMidLowFilter1, 1);","","\t\t\tapiConsole.alpa.highMidLowFilter.setHighBandGain(audioCircuit.highMidLowFilter1, 0);","\t\t\tapiConsole.alpa.highMidLowFilter.setMidBandGain(audioCircuit.highMidLowFilter1, -2.5);","\t\t\tapiConsole.alpa.highMidLowFilter.setLowBandGain(audioCircuit.highMidLowFilter1, -10);","","\t\t\tapiConsole.alpa.highMidLowFilter.setHighBandGain(audioCircuit.highMidLowFilter2, -2.5);","\t\t\tapiConsole.alpa.highMidLowFilter.setMidBandGain(audioCircuit.highMidLowFilter2, 0);","\t\t\tapiConsole.alpa.highMidLowFilter.setLowBandGain(audioCircuit.highMidLowFilter2, -2.5);","","\t\t\tapiConsole.alpa.highMidLowFilter.setHighBandGain(audioCircuit.highMidLowFilter3, -10);","\t\t\tapiConsole.alpa.highMidLowFilter.setMidBandGain(audioCircuit.highMidLowFilter3, -2.5);","\t\t\tapiConsole.alpa.highMidLowFilter.setLowBandGain(audioCircuit.highMidLowFilter3, 0);","","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state.gainOut1));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state.gainOut2));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state.gainOut3));","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state.gainIn1));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state.gainIn2));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state.gainIn3));","\t}","","//dials","\tapiConsole.interface.dialContinuous.setValue(part.gainOut1, true, state.gainOut1);","\tapiConsole.interface.dialContinuous.setValue(part.gainOut2, true, state.gainOut2);","\tapiConsole.interface.dialContinuous.setValue(part.gainOut3, true, state.gainOut3);","\tapiConsole.interface.dialContinuous.setValue(part.distortion1, true, state.distortion1);","\tapiConsole.interface.dialContinuous.setValue(part.distortion2, true, state.distortion2);","\tapiConsole.interface.dialContinuous.setValue(part.distortion3, true, state.distortion3);","\tapiConsole.interface.dialContinuous.setValue(part.resolution1, true, state.resolution1);","\tapiConsole.interface.dialContinuous.setValue(part.resolution2, true, state.resolution2);","\tapiConsole.interface.dialContinuous.setValue(part.resolution3, true, state.resolution3);","\tapiConsole.interface.dialContinuous.setValue(part.gainIn1, true, state.gainIn1);","\tapiConsole.interface.dialContinuous.setValue(part.gainIn2, true, state.gainIn2);","\tapiConsole.interface.dialContinuous.setValue(part.gainIn3, true, state.gainIn3);"],"includeLineNumbers":true}],["$","h3",null,{"children":"Mouse event handlers"}],["$","p",null,{"children":"We need to handle both regular mouse events and mouse wheel events. Luckily these two have the same structure so we can write a single handler function and use it for both. After checking to see if the dial is on the front layer (which it should be, as there's no dials on the back layer) and that all the audio nodes exist (a requirement of Typescript) we check to see if the event is from a \"continuous dial\" then move on to handle two of the event types; \"change\" and \"release\"."}],["$","p",null,{"children":"\"Change\" events appear when the dial changes its value at all, thus you can expect a lot of these to appear for any adjustment of the dial. \"Release\" events only appear when the user releases the mouse. \"Release\" events also come with the value that the dial had before any change was made."}],["$","p",null,{"children":"So, for \"change\" events we update the unit state and update the audio node. For \"release\" events we do the same, but also populate a \"modification\" value which is returned at the end of the function. Additionally at the end of the function we update the Exportable data state."}],["$","$L3",null,{"lines":["function handleMouseEvent(partIndex:number, isOnFrontLayer:boolean, event:PartEvent) {","\tif(!isOnFrontLayer) { return; }","","\tif(","\t\taudioCircuit.streamDuplicator1 === undefined ||","\t\taudioCircuit.streamDuplicator2 === undefined ||","\t\taudioCircuit.highMidLowFilter1 === undefined ||","\t\taudioCircuit.highMidLowFilter2 === undefined ||","\t\taudioCircuit.highMidLowFilter3 === undefined ||","\t\taudioCircuit.gainIn1 === undefined ||","\t\taudioCircuit.gainIn2 === undefined ||","\t\taudioCircuit.gainIn3 === undefined ||","\t\taudioCircuit.waveShaper1 === undefined ||","\t\taudioCircuit.waveShaper2 === undefined ||","\t\taudioCircuit.waveShaper3 === undefined ||","\t\taudioCircuit.gainOut1 === undefined ||","\t\taudioCircuit.gainOut2 === undefined ||","\t\taudioCircuit.gainOut3 === undefined ||","\t\taudioCircuit.streamAdder3 === undefined","\t) { return; }","","\tif(event.type === \"continuousDial\") {","\t\tlet modification:Modification | undefined;","","\t\tif(event.content.type === \"change\") {","\t\t\tswitch (partIndex) {","\t\t\t\tcase part.gainOut1:","\t\t\t\t\tstate.gainOut1 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state.gainOut1));","\t\t\t\tbreak;","\t\t\t\tcase part.gainOut2:","\t\t\t\t\tstate.gainOut2 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state.gainOut2));","\t\t\t\tbreak;","\t\t\t\tcase part.gainOut3:","\t\t\t\t\tstate.gainOut3 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state.gainOut3));","\t\t\t\tbreak;","\t\t\t\tcase part.distortion1:","\t\t\t\t\tstate.distortion1 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\tbreak;","\t\t\t\tcase part.distortion2:","\t\t\t\t\tstate.distortion2 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\tbreak;","\t\t\t\tcase part.distortion3:","\t\t\t\t\tstate.distortion3 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\tbreak;","\t\t\t\tcase part.resolution1:","\t\t\t\t\tstate.resolution1 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\tbreak;","\t\t\t\tcase part.resolution2:","\t\t\t\t\tstate.resolution2 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\tbreak;","\t\t\t\tcase part.resolution3:","\t\t\t\t\tstate.resolution3 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\tbreak;","\t\t\t\tcase part.gainIn1:","\t\t\t\t\tstate.gainIn1 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state.gainIn1));","\t\t\t\tbreak;","\t\t\t\tcase part.gainIn2:","\t\t\t\t\tstate.gainIn2 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state.gainIn2));","\t\t\t\tbreak;","\t\t\t\tcase part.gainIn3:","\t\t\t\t\tstate.gainIn3 = event.content.content.currentLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state.gainIn3));","\t\t\t\tbreak;","\t\t\t}","\t\t} else if(event.content.type === \"release\") {","\t\t\tswitch (partIndex) {","\t\t\t\tcase part.gainOut1:","\t\t\t\t\tstate.gainOut1 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state.gainOut1));","\t\t\t\t\tmodification = apiConsole.createModification(\"gainOut1\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t\tcase part.gainOut2:","\t\t\t\t\tstate.gainOut2 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state.gainOut2));","\t\t\t\t\tmodification = apiConsole.createModification(\"gainOut2\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t\tcase part.gainOut3:","\t\t\t\t\tstate.gainOut3 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state.gainOut3));","\t\t\t\t\tmodification = apiConsole.createModification(\"gainOut3\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t\tcase part.distortion1:","\t\t\t\t\tstate.distortion1 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\t\tmodification = apiConsole.createModification(\"distortion1\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t\tcase part.distortion2:","\t\t\t\t\tstate.distortion2 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper2, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\t\tmodification = apiConsole.createModification(\"distortion2\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t\tcase part.distortion3:","\t\t\t\t\tstate.distortion3 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper3, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\t\tmodification = apiConsole.createModification(\"distortion3\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t\tcase part.resolution1: {","\t\t\t\t\tstate.resolution1 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\t\tmodification = apiConsole.createModification(\"resolution1\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t} break;","\t\t\t\tcase part.resolution2: {","\t\t\t\t\tstate.resolution2 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper2, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\t\tmodification = apiConsole.createModification(\"resolution2\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t} break;","\t\t\t\tcase part.resolution3: {","\t\t\t\t\tstate.resolution3 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper3, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\t\tmodification = apiConsole.createModification(\"resolution3\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t} break;","\t\t\t\tcase part.gainIn1:","\t\t\t\t\tstate.gainIn1 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state.gainIn1));","\t\t\t\t\tmodification = apiConsole.createModification(\"gainIn1\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t\tcase part.gainIn2:","\t\t\t\t\tstate.gainIn2 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state.gainIn2));","\t\t\t\t\tmodification = apiConsole.createModification(\"gainIn2\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t\tcase part.gainIn3:","\t\t\t\t\tstate.gainIn3 = event.content.content.finishLocation;","\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state.gainIn3));","\t\t\t\t\tmodification = apiConsole.createModification(\"gainIn3\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\tbreak;","\t\t\t}","\t\t}","","\t\tupdateExportableData(state);","","\t\treturn modification;","\t}","}","","apiConsole.unit.setMouseEventListener(({ partIndex, isOnFrontLayer, event }) => handleMouseEvent(partIndex, isOnFrontLayer, event));","","apiConsole.unit.setMouseWheelEventListener(({ partIndex, isOnFrontLayer, event }) => handleMouseEvent(partIndex, isOnFrontLayer, event));"],"includeLineNumbers":true}],["$","h3",null,{"children":"The import hander"}],["$","p",null,{"children":"The import handler's job is simple; update everything to suit whatever data is provided. This includes updating the state value, changing the dials to suit and setting the audio node settings. As with the mouse event handler, we must check that all the audio nodes exist. Luckily however, we don't have to worry about update conflicts between the handler and the setup code above; if the audio nodes aren't present we can assume that they're being created, after which point the setup will use the state to populate their values. The very state that was updated in this function."}],["$","$L3",null,{"lines":["apiConsole.unit.setImportListener(({dataString}) => {","\tstate = JSON.parse(dataString) as State;","","\t//dials","\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut1, true, state.gainOut1);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut2, true, state.gainOut2);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut3, true, state.gainOut3);","\t\tapiConsole.interface.dialContinuous.setValue(part.distortion1, true, state.distortion1);","\t\tapiConsole.interface.dialContinuous.setValue(part.distortion2, true, state.distortion2);","\t\tapiConsole.interface.dialContinuous.setValue(part.distortion3, true, state.distortion3);","\t\tapiConsole.interface.dialContinuous.setValue(part.resolution1, true, state.resolution1);","\t\tapiConsole.interface.dialContinuous.setValue(part.resolution2, true, state.resolution2);","\t\tapiConsole.interface.dialContinuous.setValue(part.resolution3, true, state.resolution3);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn1, true, state.gainIn1);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn2, true, state.gainIn2);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn3, true, state.gainIn3);","","\t//audio circuit","\t\tif(","\t\t\taudioCircuit.streamDuplicator1 === undefined ||","\t\t\taudioCircuit.streamDuplicator2 === undefined ||","\t\t\taudioCircuit.highMidLowFilter1 === undefined ||","\t\t\taudioCircuit.highMidLowFilter2 === undefined ||","\t\t\taudioCircuit.highMidLowFilter3 === undefined ||","\t\t\taudioCircuit.gainIn1 === undefined ||","\t\t\taudioCircuit.gainIn2 === undefined ||","\t\t\taudioCircuit.gainIn3 === undefined ||","\t\t\taudioCircuit.waveShaper1 === undefined ||","\t\t\taudioCircuit.waveShaper2 === undefined ||","\t\t\taudioCircuit.waveShaper3 === undefined ||","\t\t\taudioCircuit.gainOut1 === undefined ||","\t\t\taudioCircuit.gainOut2 === undefined ||","\t\t\taudioCircuit.gainOut3 === undefined ||","\t\t\taudioCircuit.streamAdder3 === undefined","\t\t) { return; }","","\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state.gainOut1));","\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state.gainOut2));","\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state.gainOut3));","\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state.gainIn1));","\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state.gainIn2));","\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state.gainIn3));","});"],"includeLineNumbers":true}],["$","h3",null,{"children":"Undo / Redo handlers"}],["$","p",null,{"children":"For simpler units such as this one, undo/redo can often be combined as the only real difference between the two is whether to use the \"before\" or \"after\" values. Thus we can combine the handler into one function and have the specifics decided in the undo and redo listeners. The rest of the function should be pretty familiar as it follows what has been done in previous sections; check the audio nodes exist, update the state, update the dials and update the audio nodes."}],["$","$L3",null,{"lines":["function handleUndoRedo(meta:string, modificationValue:string) {","\tif(","\t\taudioCircuit.streamDuplicator1 === undefined ||","\t\taudioCircuit.streamDuplicator2 === undefined ||","\t\taudioCircuit.highMidLowFilter1 === undefined ||","\t\taudioCircuit.highMidLowFilter2 === undefined ||","\t\taudioCircuit.highMidLowFilter3 === undefined ||","\t\taudioCircuit.gainIn1 === undefined ||","\t\taudioCircuit.gainIn2 === undefined ||","\t\taudioCircuit.gainIn3 === undefined ||","\t\taudioCircuit.waveShaper1 === undefined ||","\t\taudioCircuit.waveShaper2 === undefined ||","\t\taudioCircuit.waveShaper3 === undefined ||","\t\taudioCircuit.gainOut1 === undefined ||","\t\taudioCircuit.gainOut2 === undefined ||","\t\taudioCircuit.gainOut3 === undefined ||","\t\taudioCircuit.streamAdder3 === undefined","\t) { return; }","","\tstate[meta] = JSON.parse(modificationValue);","\tapiConsole.interface.dialContinuous.setValue(part[meta], true, state[meta]);","","\tswitch(meta) {","\t\tcase \"gainOut1\": apiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state[meta])); break;","\t\tcase \"gainOut2\": apiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state[meta])); break;","\t\tcase \"gainOut3\": apiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state[meta])); break;","\t\tcase \"gainIn1\": apiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state[meta])); break;","\t\tcase \"gainIn2\": apiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state[meta])); break;","\t\tcase \"gainIn3\": apiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state[meta])); break;","","\t\tcase \"distortion1\":","\t\tcase \"resolution1\":","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\tbreak;","","\t\tcase \"distortion2\":","\t\tcase \"resolution2\":","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper2, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\tbreak;","","\t\tcase \"distortion3\":","\t\tcase \"resolution3\":","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper3, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\tbreak;","\t}","}","","apiConsole.unit.setUndoListener(({modification}) => {","\thandleUndoRedo(modification.meta, modification.before);","\tupdateExportableData(state);","});","","apiConsole.unit.setRedoListener(({modification}) => {","\thandleUndoRedo(modification.meta, modification.after);","\tupdateExportableData(state);","});"],"includeLineNumbers":true}]]}],["$","p",null,{"children":"In the end, we should have a file that looks like this."}],["$","$L3",null,{"lines":["import apiConsole from \"../typescript-deno-0.3.3-0.1.0/index.ts\";","import { PartEvent } from '../typescript-deno-0.3.3-0.1.0/types/platform/interface/part/event/partEvent.ts';","import { Modification } from \"../typescript-deno-0.3.3-0.1.0/types/platform/unit/unit/modification/index.ts\";","","import { part } from './constants.ts';","import { AudioCircuit, State } from './types.ts';","import { interfaceTo, updateExportableData } from './utils.ts';","","//state","\tconst audioCircuit:AudioCircuit = {","\t\tstreamDuplicator1: undefined,","\t\tstreamDuplicator2: undefined,","\t\thighMidLowFilter1: undefined,","\t\thighMidLowFilter2: undefined,","\t\thighMidLowFilter3: undefined,","\t\tgainIn1: undefined,","\t\tgainIn2: undefined,","\t\tgainIn3: undefined,","\t\twaveShaper1: undefined,","\t\twaveShaper2: undefined,","\t\twaveShaper3: undefined,","\t\tgainOut1: undefined,","\t\tgainOut2: undefined,","\t\tgainOut3: undefined,","\t\tstreamAdder3: undefined","\t}","","\tlet state:State = {","\t\tgainIn1: 0.5,","\t\tgainIn2: 0.5,","\t\tgainIn3: 0.5,","\t\tdistortion1: 0.0,","\t\tdistortion2: 0.0,","\t\tdistortion3: 0.0,","\t\tresolution1: 0.5,","\t\tresolution2: 0.5,","\t\tresolution3: 0.5,","\t\tgainOut1: 0.5,","\t\tgainOut2: 0.5,","\t\tgainOut3: 0.5","\t};","","//setup","\t//audio circuit","\t\tapiConsole.alpa.createNode({ \"type\": \"StreamDuplicator\" }, (node_id) => {audioCircuit.streamDuplicator1 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"StreamDuplicator\" }, (node_id) => {audioCircuit.streamDuplicator2 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"HighMidLowFilter\" }, (node_id) => {audioCircuit.highMidLowFilter1 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"HighMidLowFilter\" }, (node_id) => {audioCircuit.highMidLowFilter2 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"HighMidLowFilter\" }, (node_id) => {audioCircuit.highMidLowFilter3 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainIn1 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainIn2 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainIn3 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"WaveShaper\" }, (node_id) => {audioCircuit.waveShaper1 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"WaveShaper\" }, (node_id) => {audioCircuit.waveShaper2 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"WaveShaper\" }, (node_id) => {audioCircuit.waveShaper3 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainOut1 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainOut2 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"Gain\" }, (node_id) => {audioCircuit.gainOut3 = node_id; updateAudioConnections();});","\t\tapiConsole.alpa.createNode({ \"type\": \"StreamAdder3\" }, (node_id) => {audioCircuit.streamAdder3 = node_id; updateAudioConnections();});","","\t\tfunction updateAudioConnections() {","\t\t\tif(","\t\t\t\taudioCircuit.streamDuplicator1 === undefined ||","\t\t\t\taudioCircuit.streamDuplicator2 === undefined ||","\t\t\t\taudioCircuit.highMidLowFilter1 === undefined ||","\t\t\t\taudioCircuit.highMidLowFilter2 === undefined ||","\t\t\t\taudioCircuit.highMidLowFilter3 === undefined ||","\t\t\t\taudioCircuit.gainIn1 === undefined ||","\t\t\t\taudioCircuit.gainIn2 === undefined ||","\t\t\t\taudioCircuit.gainIn3 === undefined ||","\t\t\t\taudioCircuit.waveShaper1 === undefined ||","\t\t\t\taudioCircuit.waveShaper2 === undefined ||","\t\t\t\taudioCircuit.waveShaper3 === undefined ||","\t\t\t\taudioCircuit.gainOut1 === undefined ||","\t\t\t\taudioCircuit.gainOut2 === undefined ||","\t\t\t\taudioCircuit.gainOut3 === undefined ||","\t\t\t\taudioCircuit.streamAdder3 === undefined","\t\t\t) { return; }","","\t\t\tconst audioPortNodeIDs = apiConsole.alpa.getAudioPortNodeIds();","\t\t\tif(audioPortNodeIDs === undefined) { return; }","","\t\t\t//routing","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioPortNodeIDs[0], 0, audioCircuit.streamDuplicator1, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamDuplicator1, 1, audioCircuit.streamDuplicator2, 0, () => {});","","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamDuplicator1, 0, audioCircuit.gainIn1, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamDuplicator2, 0, audioCircuit.gainIn2, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamDuplicator2, 1, audioCircuit.gainIn3, 0, () => {});","","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainIn1, 0, audioCircuit.waveShaper1, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainIn2, 0, audioCircuit.waveShaper2, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainIn3, 0, audioCircuit.waveShaper3, 0, () => {});","","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.waveShaper1, 0, audioCircuit.highMidLowFilter1, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.waveShaper2, 0, audioCircuit.highMidLowFilter2, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.waveShaper3, 0, audioCircuit.highMidLowFilter3, 0, () => {});","","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.highMidLowFilter1, 0, audioCircuit.gainOut1, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.highMidLowFilter2, 0, audioCircuit.gainOut2, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.highMidLowFilter3, 0, audioCircuit.gainOut3, 0, () => {});","","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainOut1, 0, audioCircuit.streamAdder3, 0, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainOut2, 0, audioCircuit.streamAdder3, 1, () => {});","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.gainOut3, 0, audioCircuit.streamAdder3, 2, () => {});","","\t\t\t\tapiConsole.alpa.createRouteNodeToNode(audioCircuit.streamAdder3, 0, audioPortNodeIDs[1], 0, () => {});","","\t\t\t//set up","\t\t\t\tapiConsole.alpa.highMidLowFilter.setHighBandQ(audioCircuit.highMidLowFilter1, 1);","\t\t\t\tapiConsole.alpa.highMidLowFilter.setMidBandQ(audioCircuit.highMidLowFilter1, 1);","\t\t\t\tapiConsole.alpa.highMidLowFilter.setLowBandQ(audioCircuit.highMidLowFilter1, 1);","","\t\t\t\tapiConsole.alpa.highMidLowFilter.setHighBandGain(audioCircuit.highMidLowFilter1, 0);","\t\t\t\tapiConsole.alpa.highMidLowFilter.setMidBandGain(audioCircuit.highMidLowFilter1, -2.5);","\t\t\t\tapiConsole.alpa.highMidLowFilter.setLowBandGain(audioCircuit.highMidLowFilter1, -10);","","\t\t\t\tapiConsole.alpa.highMidLowFilter.setHighBandGain(audioCircuit.highMidLowFilter2, -2.5);","\t\t\t\tapiConsole.alpa.highMidLowFilter.setMidBandGain(audioCircuit.highMidLowFilter2, 0);","\t\t\t\tapiConsole.alpa.highMidLowFilter.setLowBandGain(audioCircuit.highMidLowFilter2, -2.5);","","\t\t\t\tapiConsole.alpa.highMidLowFilter.setHighBandGain(audioCircuit.highMidLowFilter3, -10);","\t\t\t\tapiConsole.alpa.highMidLowFilter.setMidBandGain(audioCircuit.highMidLowFilter3, -2.5);","\t\t\t\tapiConsole.alpa.highMidLowFilter.setLowBandGain(audioCircuit.highMidLowFilter3, 0);","","\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state.gainOut1));","\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state.gainOut2));","\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state.gainOut3));","\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state.gainIn1));","\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state.gainIn2));","\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state.gainIn3));","\t\t}","","\t//dials","\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut1, true, state.gainOut1);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut2, true, state.gainOut2);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut3, true, state.gainOut3);","\t\tapiConsole.interface.dialContinuous.setValue(part.distortion1, true, state.distortion1);","\t\tapiConsole.interface.dialContinuous.setValue(part.distortion2, true, state.distortion2);","\t\tapiConsole.interface.dialContinuous.setValue(part.distortion3, true, state.distortion3);","\t\tapiConsole.interface.dialContinuous.setValue(part.resolution1, true, state.resolution1);","\t\tapiConsole.interface.dialContinuous.setValue(part.resolution2, true, state.resolution2);","\t\tapiConsole.interface.dialContinuous.setValue(part.resolution3, true, state.resolution3);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn1, true, state.gainIn1);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn2, true, state.gainIn2);","\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn3, true, state.gainIn3);","","//mouse events","\tfunction handleMouseEvent(partIndex:number, isOnFrontLayer:boolean, event:PartEvent) {","\t\tif(!isOnFrontLayer) { return; }","","\t\tif(","\t\t\taudioCircuit.streamDuplicator1 === undefined ||","\t\t\taudioCircuit.streamDuplicator2 === undefined ||","\t\t\taudioCircuit.highMidLowFilter1 === undefined ||","\t\t\taudioCircuit.highMidLowFilter2 === undefined ||","\t\t\taudioCircuit.highMidLowFilter3 === undefined ||","\t\t\taudioCircuit.gainIn1 === undefined ||","\t\t\taudioCircuit.gainIn2 === undefined ||","\t\t\taudioCircuit.gainIn3 === undefined ||","\t\t\taudioCircuit.waveShaper1 === undefined ||","\t\t\taudioCircuit.waveShaper2 === undefined ||","\t\t\taudioCircuit.waveShaper3 === undefined ||","\t\t\taudioCircuit.gainOut1 === undefined ||","\t\t\taudioCircuit.gainOut2 === undefined ||","\t\t\taudioCircuit.gainOut3 === undefined ||","\t\t\taudioCircuit.streamAdder3 === undefined","\t\t) { return; }","","\t\tif(event.type === \"continuousDial\") {","\t\t\tlet modification:Modification | undefined;","","\t\t\tif(event.content.type === \"change\") {","\t\t\t\tswitch (partIndex) {","\t\t\t\t\tcase part.gainOut1:","\t\t\t\t\t\tstate.gainOut1 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state.gainOut1));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainOut2:","\t\t\t\t\t\tstate.gainOut2 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state.gainOut2));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainOut3:","\t\t\t\t\t\tstate.gainOut3 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state.gainOut3));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.distortion1:","\t\t\t\t\t\tstate.distortion1 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.distortion2:","\t\t\t\t\t\tstate.distortion2 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.distortion3:","\t\t\t\t\t\tstate.distortion3 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.resolution1:","\t\t\t\t\t\tstate.resolution1 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.resolution2:","\t\t\t\t\t\tstate.resolution2 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.resolution3:","\t\t\t\t\t\tstate.resolution3 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainIn1:","\t\t\t\t\t\tstate.gainIn1 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state.gainIn1));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainIn2:","\t\t\t\t\t\tstate.gainIn2 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state.gainIn2));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainIn3:","\t\t\t\t\t\tstate.gainIn3 = event.content.content.currentLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state.gainIn3));","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t} else if(event.content.type === \"release\") {","\t\t\t\tswitch (partIndex) {","\t\t\t\t\tcase part.gainOut1:","\t\t\t\t\t\tstate.gainOut1 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state.gainOut1));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"gainOut1\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainOut2:","\t\t\t\t\t\tstate.gainOut2 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state.gainOut2));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"gainOut2\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainOut3:","\t\t\t\t\t\tstate.gainOut3 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state.gainOut3));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"gainOut3\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.distortion1:","\t\t\t\t\t\tstate.distortion1 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"distortion1\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.distortion2:","\t\t\t\t\t\tstate.distortion2 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper2, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"distortion2\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.distortion3:","\t\t\t\t\t\tstate.distortion3 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper3, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"distortion3\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.resolution1: {","\t\t\t\t\t\tstate.resolution1 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"resolution1\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\t} break;","\t\t\t\t\tcase part.resolution2: {","\t\t\t\t\t\tstate.resolution2 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper2, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"resolution2\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\t} break;","\t\t\t\t\tcase part.resolution3: {","\t\t\t\t\t\tstate.resolution3 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper3, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"resolution3\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\t} break;","\t\t\t\t\tcase part.gainIn1:","\t\t\t\t\t\tstate.gainIn1 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state.gainIn1));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"gainIn1\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainIn2:","\t\t\t\t\t\tstate.gainIn2 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state.gainIn2));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"gainIn2\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t\tcase part.gainIn3:","\t\t\t\t\t\tstate.gainIn3 = event.content.content.finishLocation;","\t\t\t\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state.gainIn3));","\t\t\t\t\t\tmodification = apiConsole.createModification(\"gainIn3\", JSON.stringify(event.content.content.initialLocation), JSON.stringify(event.content.content.finishLocation));","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","","\t\t\tupdateExportableData(state);","","\t\t\treturn modification;","\t\t}","\t}","","\tapiConsole.unit.setMouseEventListener(({ partIndex, isOnFrontLayer, event }) => handleMouseEvent(partIndex, isOnFrontLayer, event));","","\tapiConsole.unit.setMouseWheelEventListener(({ partIndex, isOnFrontLayer, event }) => handleMouseEvent(partIndex, isOnFrontLayer, event));","","//import","\tapiConsole.unit.setImportListener(({dataString}) => {","\t\tstate = JSON.parse(dataString) as State;","","\t\t//dials","\t\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut1, true, state.gainOut1);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut2, true, state.gainOut2);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.gainOut3, true, state.gainOut3);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.distortion1, true, state.distortion1);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.distortion2, true, state.distortion2);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.distortion3, true, state.distortion3);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.resolution1, true, state.resolution1);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.resolution2, true, state.resolution2);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.resolution3, true, state.resolution3);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn1, true, state.gainIn1);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn2, true, state.gainIn2);","\t\t\tapiConsole.interface.dialContinuous.setValue(part.gainIn3, true, state.gainIn3);","","\t\t//audio circuit","\t\t\tif(","\t\t\t\taudioCircuit.streamDuplicator1 === undefined ||","\t\t\t\taudioCircuit.streamDuplicator2 === undefined ||","\t\t\t\taudioCircuit.highMidLowFilter1 === undefined ||","\t\t\t\taudioCircuit.highMidLowFilter2 === undefined ||","\t\t\t\taudioCircuit.highMidLowFilter3 === undefined ||","\t\t\t\taudioCircuit.gainIn1 === undefined ||","\t\t\t\taudioCircuit.gainIn2 === undefined ||","\t\t\t\taudioCircuit.gainIn3 === undefined ||","\t\t\t\taudioCircuit.waveShaper1 === undefined ||","\t\t\t\taudioCircuit.waveShaper2 === undefined ||","\t\t\t\taudioCircuit.waveShaper3 === undefined ||","\t\t\t\taudioCircuit.gainOut1 === undefined ||","\t\t\t\taudioCircuit.gainOut2 === undefined ||","\t\t\t\taudioCircuit.gainOut3 === undefined ||","\t\t\t\taudioCircuit.streamAdder3 === undefined","\t\t\t) { return; }","","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state.gainOut1));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state.gainOut2));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state.gainOut3));","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state.gainIn1));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state.gainIn2));","\t\t\tapiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state.gainIn3));","\t});","","//undo / redo","\tfunction handleUndoRedo(meta:string, modificationValue:string) {","\t\tif(","\t\t\taudioCircuit.streamDuplicator1 === undefined ||","\t\t\taudioCircuit.streamDuplicator2 === undefined ||","\t\t\taudioCircuit.highMidLowFilter1 === undefined ||","\t\t\taudioCircuit.highMidLowFilter2 === undefined ||","\t\t\taudioCircuit.highMidLowFilter3 === undefined ||","\t\t\taudioCircuit.gainIn1 === undefined ||","\t\t\taudioCircuit.gainIn2 === undefined ||","\t\t\taudioCircuit.gainIn3 === undefined ||","\t\t\taudioCircuit.waveShaper1 === undefined ||","\t\t\taudioCircuit.waveShaper2 === undefined ||","\t\t\taudioCircuit.waveShaper3 === undefined ||","\t\t\taudioCircuit.gainOut1 === undefined ||","\t\t\taudioCircuit.gainOut2 === undefined ||","\t\t\taudioCircuit.gainOut3 === undefined ||","\t\t\taudioCircuit.streamAdder3 === undefined","\t\t) { return; }","","\t\tstate[meta] = JSON.parse(modificationValue);","\t\tapiConsole.interface.dialContinuous.setValue(part[meta], true, state[meta]);","","\t\tswitch(meta) {","\t\t\tcase \"gainOut1\": apiConsole.alpa.gain.setValue(audioCircuit.gainOut1, interfaceTo.gain(state[meta])); break;","\t\t\tcase \"gainOut2\": apiConsole.alpa.gain.setValue(audioCircuit.gainOut2, interfaceTo.gain(state[meta])); break;","\t\t\tcase \"gainOut3\": apiConsole.alpa.gain.setValue(audioCircuit.gainOut3, interfaceTo.gain(state[meta])); break;","\t\t\tcase \"gainIn1\": apiConsole.alpa.gain.setValue(audioCircuit.gainIn1, interfaceTo.gain(state[meta])); break;","\t\t\tcase \"gainIn2\": apiConsole.alpa.gain.setValue(audioCircuit.gainIn2, interfaceTo.gain(state[meta])); break;","\t\t\tcase \"gainIn3\": apiConsole.alpa.gain.setValue(audioCircuit.gainIn3, interfaceTo.gain(state[meta])); break;","","\t\t\tcase \"distortion1\":","\t\t\tcase \"resolution1\":","\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper1, interfaceTo.waveShaperCurve(state.resolution1, state.distortion1));","\t\t\tbreak;","","\t\t\tcase \"distortion2\":","\t\t\tcase \"resolution2\":","\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper2, interfaceTo.waveShaperCurve(state.resolution2, state.distortion2));","\t\t\tbreak;","","\t\t\tcase \"distortion3\":","\t\t\tcase \"resolution3\":","\t\t\t\tapiConsole.alpa.waveShaper.setCurve(audioCircuit.waveShaper3, interfaceTo.waveShaperCurve(state.resolution3, state.distortion3));","\t\t\tbreak;","\t\t}","\t}","","\tapiConsole.unit.setUndoListener(({modification}) => {","\t\thandleUndoRedo(modification.meta, modification.before);","\t\tupdateExportableData(state);","\t});","","\tapiConsole.unit.setRedoListener(({modification}) => {","\t\thandleUndoRedo(modification.meta, modification.after);","\t\tupdateExportableData(state);","\t});"],"includeLineNumbers":true}],["$","p",null,{"children":"And this should leave us finally with a file structure like so"}],["$","$L3",null,{"lines":["custom_audio","├─ deno","├─ multi_channel_distortion","│  ├ constants.ts","│  ├ index.unit","│  ├ types.ts","│  └ utils.ts","└─ typescript-deno-x.x.x-y.y.y"]}],["$","h2",null,{"children":"Done!"}],["$","p",null,{"children":"Congratulations! You've just created a new unit which uses the audio engine. You can now play around with it in whatever way you like. Personally, I find it sounds great as a distortion box for an electric guitar. Having the ability to chose how much distortion I have for High or Low frequencies really gives lots of freedom in what sounds you can create."}],["$","img",null,{"className":"style_image__0ycHi","src":"/guide/developer/tutorials/multi-channel-distortion/unit-in-system.png"}]]}],["$","div",null,{"className":"style_previousNext__Pea0Y","children":["$undefined","$undefined"]}]]}]]}]}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/518ba64fc6b7f185.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","guide","children","developer","children","tutorials","children","article","children","multi-channel-distortion","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","guide","children","developer","children","tutorials","children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","guide","children","developer","children","tutorials","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","guide","children","developer","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","guide","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b207df9cce6f5d60.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_c0d5fb","children":["$","div",null,{"className":"style_main__l8Il9","children":[["$","div",null,{"children":[[["$","div",null,{"className":"style_desktop__CvcZU","children":["$","div",null,{"className":"style_main__JqgJs","children":[["$","div",null,{"className":"style_logo___Nv4Y","children":["$","$L2",null,{"href":"/","className":"style_logoLink__8L3yx","children":["$","img",null,{"src":"/icon.png","className":"style_logoImage__PktfC"}]}]}],["$","div",null,{"className":"style_links__h4_vb","children":[[["$","div","link-0",{"className":"style_linkAndSub__7qTZ1","children":[["$","$L2",null,{"href":"/news","className":"style_link__4XuJC","children":"News"}],"$undefined"]}],["$","div","link-1",{"className":"style_linkAndSub__7qTZ1","children":[["$","$L2",null,{"href":"/guide","className":"style_link__4XuJC","children":"Guide"}],["$","div",null,{"className":"style_sub__vF1DF","children":[["$","div","link-1-sublink-0",{"className":"style_linkAndSub__7qTZ1","children":["$","$L2",null,{"href":"/guide/getting-started","className":"style_link__4XuJC","children":"Getting Started"}]}],["$","div","link-1-sublink-1",{"className":"style_linkAndSub__7qTZ1","children":["$","$L2",null,{"href":"/guide/units","className":"style_link__4XuJC","children":"Units"}]}],["$","div","link-1-sublink-2",{"className":"style_linkAndSub__7qTZ1","children":["$","$L2",null,{"href":"/guide/developer","className":"style_link__4XuJC","children":"Developer"}]}]]}]]}]],["$","$L2",null,{"href":"/download","className":"style_download__caECe","children":"Download"}]]}]]}]}],["$","div",null,{"className":"style_mobile__mRKt2","children":["$","$L6",null,{}]}]],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]]}],["$","footer",null,{"className":"style_main__NsKqp","children":[["$","img",null,{"src":"/four_colour_stripes_banner.png","className":"style_backgroundImage___DZ8F"}],["$","div",null,{"className":"style_overlay__nf3f4","children":["$","p",null,{"children":"© Metasophiea / Interloper 2024"}]}]]}]]}]}]}]],null],null],["$L7",null]]]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Alchemy"}],["$","meta","3",{"name":"description","content":"A Virtual Studio"}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
